#!/usr/bin/env bash

set -euo pipefail

log::generic() {
    local level
    level=$1
    shift

    printf "%s\t%s\n" "$level" "$*"
}

log::info() {
    log::generic INFO "$@"
}

log::fatal() {
    log::generic FATAL "$@"
    exit 1
}

lookup-remote-tag() {
    local remote tag tagfile tagcount
    remote=$1
    shift
    tag=$1
    shift

    tagfile=$(mktemp)

    git ls-remote --tags "$remote" "$tag" >"$tagfile"

    tagcount=$(wc -l <"$tagfile")

    if [[ $tagcount -lt 1 ]]; then
        log::fatal "no tags found on $remote for $tag!"
    fi

    if [[ $tagcount -gt 1 ]]; then
        log::fatal "found more than one tag matching $tag on $remote.  cowardly giving up!"
    fi

    awk '{ print $1;}' <"$tagfile"
    rm "$tagfile"
}

fetch-remote() {
    local remote
    remote=$1
    shift
    log::info "git fetching remote $remote..."
    git fetch "$remote"
}

default-build() {
    # shellcheck disable=SC2154,SC1091
    (set +u && source ci/rust-version.sh stable && env | grep rust_ && cargo +"$rust_stable" deb -p "$target")
    mv target/debian/*.deb "../build/$ref/."
}

generate-replacement-metadata() {
    local name
    name=$1
    shift
    cat <<EOF
name = "$name"
maintainer = "Engineering <engineering@abklabs.com>"
EOF
}

anza-build-extra() {
    cat <<EOF >>genesis/Cargo.toml
[package.metadata.deb]
$(generate-replacement-metadata svmkit-solana-genesis)
EOF

    cat <<EOF >>faucet/Cargo.toml
[package.metadata.deb]
$(generate-replacement-metadata svmkit-solana-faucet)
EOF

    cat <<EOF >>cli/Cargo.toml
[package.metadata.deb]
$(generate-replacement-metadata svmkit-solana-cli)
EOF

    cat <<EOF >>ledger-tool/Cargo.toml
[package.metadata.deb]
$(generate-replacement-metadata svmkit-agave-ledger-tool)
EOF

    cat <<EOF >>watchtower/Cargo.toml
[package.metadata.deb]
$(generate-replacement-metadata svmkit-agave-watchtower)
EOF

    cat <<EOF >>bench-tps/Cargo.toml
[package.metadata.deb]
$(generate-replacement-metadata svmkit-solana-bench-tps)
EOF

    # shellcheck disable=SC2154,SC1091
    (
        set +u
        source ci/rust-version.sh stable
        env | grep rust_
        cargo +"$rust_stable" deb -p solana-genesis
        cargo +"$rust_stable" deb -p solana-faucet
        cargo +"$rust_stable" deb -p solana-cli
        cargo +"$rust_stable" deb -p agave-ledger-tool
        cargo +"$rust_stable" deb -p agave-watchtower
        cargo +"$rust_stable" deb -p solana-bench-tps
    )

    default-build
}

build-ref() {
    local ref target
    buildfunc=default-build
    package_name=$1
    shift
    ref=$1
    shift
    target=$1
    shift

    if [[ $# -gt 0 ]]; then
        buildfunc=$1
        shift
    fi

    log::info "building $ref -> $target..."
    mkdir -p "../build/$ref"
    git clean -f -d -x
    git checkout -f "$ref"
    git submodule update --init
    cat <<EOF >>validator/Cargo.toml
[package.metadata.deb]
name = "$package_name"
maintainer = "Engineering <engineering@abklabs.com>"
provides = "svmkit-validator"
conflicts = "svmkit-validator"
replaces = "svmkit-validator"
recommends = "svmkit-agave-ledger-tool"
depends = "bash, curl, jq"
assets = [
  { source = "templates", dest = "var/lib/dpkg/info/${package_name}.templates", mode = "0644" },
  { source = "${package_name}.service", dest = "/etc/systemd/system/${package_name}.service", mode = "0644" },
  { source = "run-validator", dest = "/usr/bin/run-validator", mode = "0755" },
  { source = "stop-validator", dest = "/usr/bin/stop-validator", mode = "0755" },
  { source = "check-validator", dest = "/usr/bin/check-validator", mode = "0755" },
  { source = "target/release/${target}", dest = "/usr/bin/${target}", mode = "0755" }
]

maintainer-scripts = "."
EOF

    cat <<EOF > "validator/${package_name}.service"
[Unit]
Description=$package_name

[Service]
Type=exec
User=sol
Group=sol
ExecStart=/usr/bin/run-validator
ExecStartPost=/usr/bin/check-validator
ExecStop=/usr/bin/stop-validator
LimitNOFILE=1000000

[Install]
WantedBy=default.target
EOF

    cat <<EOF > validator/run-validator
#!/usr/bin/env bash
if [[ ! -f "/etc/validators.d/${package_name}/run-validator.env" ]]; then
    echo "No run-validator.env found." 1>&2
    exit 1
fi
. "/etc/validators.d/${package_name}/run-validator.env"
\${VALIDATOR_ENV} exec \${VALIDATOR_PROCESS} \${VALIDATOR_FLAGS}
EOF
    chmod +x validator/run-validator

    cat <<EOF > validator/stop-validator
#!/usr/bin/env bash
if [[ ! -f "/etc/validators.d/${package_name}/stop-validator.env" ]]; then
    echo "No stop-validator.env found." 1>&2
    exit 1
fi
. "/etc/validators.d/${package_name}/stop-validator.env"
\${VALIDATOR_ENV} exec \${VALIDATOR_PROCESS} --ledger \${LEDGER_PATH} exit \${VALIDATOR_EXIT_FLAGS}
EOF
    chmod +x validator/stop-validator

    cat <<EOF > validator/check-validator
#!/usr/bin/env bash
set -euo pipefail

if [[ ! -f "/etc/validators.d/${package_name}/check-validator.env" ]]; then
    echo "No check-validator.env found." 1>&2
    exit 0
fi

. "/etc/validators.d/${package_name}/check-validator.env"

HAS_STARTUP_POLICY="\${HAS_STARTUP_POLICY:-false}"

if [[ "\$HAS_STARTUP_POLICY" != "true" ]]; then
  exit 0
fi

WAIT_FOR_RPC_HEALTH="\${WAIT_FOR_RPC_HEALTH:-false}"

if [[ "\$WAIT_FOR_RPC_HEALTH" != "true" ]]; then
  exit 0
fi

RPC_BIND_ADDRESS="\${RPC_BIND_ADDRESS:-0.0.0.0}"
RPC_PORT="\${RPC_PORT:-8899}"
RPC_SERVICE_TIMEOUT="\${RPC_SERVICE_TIMEOUT:-120}"

is-rpc-healthy() {
    local url result
    url="\$1"
    result="\$(curl -s -X POST -H "Content-Type: application/json" \
      -d '{"jsonrpc":"2.0","id":1,"method":"getHealth"}' "\$url" | jq -r .result)"
    [[ "\$result" = "ok" ]]
}

for i in \$(seq 1 "\$RPC_SERVICE_TIMEOUT"); do
    if is-rpc-healthy "http://\$RPC_BIND_ADDRESS:\$RPC_PORT"; then
        exit 0
    fi
    sleep 1
done

echo "Timed out waiting for validator to bring RPC online!" 1>&2
exit 1
EOF

    cat <<EOF > validator/templates
Template: ${package_name}/has-startup-policy
Type: boolean
Default: false
Description: Does the validator have a startup policy?

Template: ${package_name}/wait-for-rpc-health
Type: boolean
Default: false
Description: Should the validator wait for RPC health on startup?

Template: ${package_name}/validator-env
Type: string
Default: ""
Description: Environment variables to set when running the validator.

Template: ${package_name}/validator-process
Type: string
Default: ""
Description: The process to run when starting the validator.

Template: ${package_name}/validator-flags
Type: string
Default: ""
Description: Flags to pass to the validator process.

Template: ${package_name}/validator-exit-flags
Type: string
Default: ""
Description: Flags to pass to the validator process when stopping.

Template: ${package_name}/ledger-path
Type: string
Default: ""
Description: The path to the ledger.

Template: ${package_name}/has-timeout-config
Type: boolean
Default: false
Description: Does the validator have a timeout configuration?

Template: ${package_name}/rpc-service-timeout
Type: string
Default: "120"
Description: The timeout for the RPC service.

Template: ${package_name}/rpc-bind-address
Type: string
Default: "0.0.0.0"
Description: The RPC bind address.

Template: ${package_name}/rpc-port
Type: string
Default: "8899"
Description: The RPC port.

EOF

    cat <<EOF > validator/prerm
#!/bin/sh
set -e

case "\$1" in
  remove|deconfigure)
    systemctl stop ${package_name}.service || true
    systemctl disable ${package_name}.service || true
    systemctl daemon-reload || true
    ;;
esac

exit 0
EOF
    chmod +x validator/prerm

    cat <<EOF > validator/postinst
#!/bin/bash
set -e

. /usr/share/debconf/confmodule 2>/dev/null || true

case "\$1" in
  configure)
    # Load templates
    db_x_loadtemplatefile /var/lib/dpkg/info/${package_name}.templates ${package_name} 2>/dev/null || true

    db_input high ${package_name}/has-startup-policy || true
    db_input high ${package_name}/wait-for-rpc-health || true

    db_input high ${package_name}/validator-env || true
    db_input high ${package_name}/validator-process || true
    db_input high ${package_name}/validator-flags || true
    db_input high ${package_name}/validator-exit-flags || true
    db_input high ${package_name}/ledger-path || true

    db_input high ${package_name}/has-timeout-config || true
    db_input high ${package_name}/rpc-service-timeout || true

    db_input high ${package_name}/rpc-bind-address || true
    db_input high ${package_name}/rpc-port || true

    db_go || true
    
    db_get ${package_name}/has-startup-policy
    HAS_STARTUP_POLICY="\$RET"

    db_get ${package_name}/wait-for-rpc-health
    WAIT_FOR_RPC_HEALTH="\$RET"

    db_get ${package_name}/validator-env
    VALIDATOR_ENV="\$RET"

    db_get ${package_name}/validator-process
    VALIDATOR_PROCESS="\$RET"

    db_get ${package_name}/validator-flags
    VALIDATOR_FLAGS="\$RET"

    db_get ${package_name}/validator-exit-flags
    VALIDATOR_EXIT_FLAGS="\$RET"

    db_get ${package_name}/ledger-path
    LEDGER_PATH="\$RET"

    db_get ${package_name}/has-timeout-config
    HAS_TIMEOUT_CONFIG="\$RET"

    db_get ${package_name}/rpc-service-timeout
    RPC_SERVICE_TIMEOUT="\$RET"

    db_get ${package_name}/rpc-bind-address
    RPC_BIND_ADDRESS="\$RET"

    db_get ${package_name}/rpc-port
    RPC_PORT="\$RET"

    ETC_DIR=/etc/validators.d/${package_name}
    mkdir -p "\$ETC_DIR"

    cat <<CONF >\${ETC_DIR}/run-validator.env
VALIDATOR_ENV="\$VALIDATOR_ENV"
VALIDATOR_PROCESS="\$VALIDATOR_PROCESS"
VALIDATOR_FLAGS="\$VALIDATOR_FLAGS"
CONF
    chmod 0644 \${ETC_DIR}/run-validator.env

    cat <<CONF >\${ETC_DIR}/stop-validator.env
VALIDATOR_ENV="\$VALIDATOR_ENV"
VALIDATOR_PROCESS="\$VALIDATOR_PROCESS"
LEDGER_PATH="\$LEDGER_PATH"
VALIDATOR_EXIT_FLAGS="\$VALIDATOR_EXIT_FLAGS"
CONF
    chmod 0644 \${ETC_DIR}/stop-validator.env

    cat <<CONF >\${ETC_DIR}/check-validator.env
HAS_STARTUP_POLICY="\$HAS_STARTUP_POLICY"
WAIT_FOR_RPC_HEALTH="\$WAIT_FOR_RPC_HEALTH"
HAS_TIMEOUT_CONFIG="\$HAS_TIMEOUT_CONFIG"
RPC_SERVICE_TIMEOUT="\$RPC_SERVICE_TIMEOUT"
RPC_BIND_ADDRESS="\$RPC_BIND_ADDRESS"
RPC_PORT="\$RPC_PORT"
CONF
    chmod 0644 \${ETC_DIR}/check-validator.env

    systemctl daemon-reload || true
    ;;
esac

exit 0
EOF
    chmod +x validator/postinst

    $buildfunc
    git submodule deinit --all
    git checkout -f master
}

build-with-other-clang() {
    local tmpdir llvmroot

    tmpdir=$(mktemp -d)
    llvmroot=/usr/lib/llvm-14

    # This is a massive hack to work around lack of configurability inside crates.
    cat <<'EOF' >"$tmpdir/c++"
#!/usr/bin/env bash

if echo "$@" | grep ROCKSDB > /dev/null ; then
	exec $llvmroot/bin/clang++ "$@" -include cstdint
else
	exec $llvmroot/bin/clang++ "$@"
fi
EOF
    chmod 755 "$tmpdir/c++"

    ln -s $llvmroot/bin/clang "$tmpdir/clang"
    ln -s $llvmroot/bin/clang++ "$tmpdir/clang++"

    ln -s $llvmroot/bin/cc "$tmpdir/cc"

    PATH=$tmpdir:$PATH LLVM_CONFIG_PATH=$llvmroot/bin/llvm-config LIBCLANG_PATH=$llvmroot/lib/libclang.so.1 default-build
    rm -rf "$tmpdir"
}

for remote in solana-labs anza-xyz PowerLedger jito-foundation pyth-network mantis xen tachyon; do
    fetch-remote $remote
done

build-ref svmkit-solana-validator solana-labs/master solana-validator

for tag in v1.18.25 v1.18.26 v2.0.18 v2.0.20 v2.0.21 v2.0.22 v2.0.24 v2.1.4 v2.1.6 v2.1.7 v2.1.8 v2.1.9 v2.1.11 v2.1.13 v2.1.14 v2.2.0; do
    build-ref svmkit-agave-validator "$(lookup-remote-tag anza-xyz $tag)" agave-validator anza-build-extra
done

build-ref svmkit-powerledger-validator PowerLedger/upgrade_to_v1.16.28 solana-validator

for tag in v2.0.18-jito v2.0.19-jito v2.0.21-jito v2.0.22-jito v2.1.7-jito v2.1.11-jito v2.1.13-jito; do
    build-ref svmkit-jito-validator "$(lookup-remote-tag jito-foundation $tag)" agave-validator
done

build-ref svmkit-pyth-validator pyth-network/pyth-v1.14.17 solana-validator build-with-other-clang

build-ref svmkit-mantis-validator mantis/mantis/diet-validator-rpc solana-validator

build-ref svmkit-xen-validator xen/dyn_fees_v1 solana-validator

build-ref svmkit-tachyon-validator tachyon/dyn_fees_v2 tachyon-validator
